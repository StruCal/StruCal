@{
    ViewBag.Title = "RCBeam";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>RCBeam</h2>


<div class="container-fluid" ng-app="rcBeam">

    <h2>Reinforced concrete members calculator</h2>
    <br />

    <div class="row" ng-controller="mainCtrl">
        <div class="col-xs-12 col-lg-12 text-left">
            <!-- Trigger the modal with a button -->
            <div class="form-inline">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalCoefficients">Coefficients</button>
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalConcrete">Concrete</button>
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalSteel">Steel</button>
                <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Sections <span class="caret"></span>
                </button>
                    <ul class="dropdown-menu">
                        <li><a data-toggle="modal" href="#modalSections">Section 1</a></li>
                        <li><a data-toggle="modal" href="#modalSections2">Section 2</a></li>
                    </ul>
                    </div>
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modalLoads">Loads</button>
            </div>
            <br />
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Results</h3>
                    </div>
                    <div class="panel-body">

                    </div>
                </div>
            </div>
        </div>
    </div>

    @Html.Partial("_CoefficientsModal")
    @Html.Partial("_ConcreteModal")

    
    
    <!-- Modal Steel-->
    <div class="modal fade" id="modalSteel" role="dialog">
        <div class="modal-dialog" style="max-height:75%;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Steel</h4>
                </div>
                <div class="modal-body">
                    @*Steel Class Select*@
                    <div class="form-group" data-toggle="tooltip" title="Select steel class.">
                        <label for="SteelClass">Steel class</label>
                        <select class="form-control" id="SteelClass" data-bind="options: SteelClassList, value: SteelClass"></select>
                    </div>

                    @*Characteristic yield strength of steel Input*@
                    <label for="CharacteristicYieldStrengthOfSteel">Characteristic yield strength of steel:</label>
                    <div class="form-inline">
                        @{
                            string fyk = "f_{yk}";
                            <label>\(@fyk = \)</label>

                        }
                        <input type="number" class="form-control" id="fyk" data-bind="value: Fyk, valueUpdate: 'afterkeydown'">
                        <label>[MPa]</label>
                    </div>
                    @*Design yield strength of steel Input*@
                    <label for="DesignYieldStrengthOfSteel">Design yield strength of steel:</label>
                    <div class="form-inline">
                        @{
                            string fyd = "f_{yd}";
                            <label>\(@fyd = \)</label>

                        }
                        <input type="number" class="form-control" id="fyd" data-bind="value: Fyd, valueUpdate: 'afterkeydown'">
                        <label>[MPa]</label>
                    </div>

                    <canvas id="StressStrainSteel"
                            data-bind="chart: { type: 'line', data: StressStrainSteel, options: { observeChanges: true, throttle: 1000}}"></canvas>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Sections-->
    <div class="modal fade" id="modalSections" role="dialog">
        <div class="modal-dialog" style="max-height:75%;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Sections</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            @*Rectangular cross-section width*@
                            <label for="RectangularCrossSectionWidth">Rectangular cross-section width:</label>
                            <div class="form-inline">
                                @{
                                    string b = "b";
                                    <label>\(@b = \)</label>

                                }
                                <input type="number" class="form-control" id="rectWidth" data-bind="value: RectWidth, valueUpdate: 'afterkeydown'">
                                <label>[cm]</label>
                            </div>

                            @*Rectangular cross-section height*@
                            <label for="RectangularCrossSectionHeight">Rectangular cross-section height:</label>
                            <div class="form-inline">
                                @{
                                    string h = "h";
                                    <label>\(@h = \)</label>

                                }
                                <input type="number" class="form-control" id="rectHeight" data-bind="value: RectHeight, valueUpdate: 'afterkeydown'">
                                <label>[cm]</label>
                            </div>
                        </div>
                        @*RECT DRAWING*@
                        <div id="rectCrossSection" class="col-md-6"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Sections2-->
    <div class="modal fade" id="modalSections2" role="dialog">
        <div class="modal-dialog" style="max-height:75%;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Sections</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            @*Rectangular cross-section width*@
                            <label for="RectangularCrossSectionWidth">Rectangular cross-section width2:</label>
                            <div class="form-inline">
                                @{
                                    string b2 = "b";
                                    <label>\(@b = \)</label>

                                }
                                <input type="number" class="form-control" id="rectWidth" data-bind="value: RectWidth, valueUpdate: 'afterkeydown'">
                                <label>[cm]</label>
                            </div>

                            @*Rectangular cross-section height*@
                            <label for="RectangularCrossSectionHeight">Rectangular cross-section height:</label>
                            <div class="form-inline">
                                @{
                                    string h2 = "h";
                                    <label>\(@h = \)</label>

                                }
                                <input type="number" class="form-control" id="rectHeight" data-bind="value: RectHeight, valueUpdate: 'afterkeydown'">
                                <label>[cm]</label>
                            </div>
                        </div>
                        @*RECT DRAWING*@
                        <div id="rectCrossSection" class="col-md-6"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Loads-->
    <div class="modal fade" id="modalLoads" role="dialog">
        <div class="modal-dialog" style="max-height:75%;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Loads</h4>
                </div>
                <div class="modal-body">
                    @*Bending moment*@
                    <label for="BendingMoment">Bending moment:</label>
                    <div class="form-inline">
                        @{
                            string m = "M";
                            <label>\(@m = \)</label>

                        }
                        <input type="number" class="form-control" id="bendingMoment" data-bind="value: Moment, valueUpdate: 'afterkeydown'">
                        <label>[kNm]</label>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@Scripts.Render("~/bundles/svg")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/drawing")

@Scripts.Render("~/bundles/rcBeam")

<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.1/knockout-min.js" type="text/javascript"></script>
<script src="~/Scripts/Chart.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js" type="text/javascript"></script>
<script src="~/Scripts/knockout.chart.js" type="text/javascript"></script>


<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>
<script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-chart.js/1.1.1/angular-chart.js"></script>
<script>

    var rcBeam = angular.module('rcBeam', ['chart.js']);

    rcBeam.controller('mainCtrl', function ($scope) {

    });


    rcBeam.controller('coefficientsCtrl', function ($scope, $rootScope) {
        $scope.gammaS = 1.15;
        $scope.gammaC = 1.5;

        $scope.save = function () {
            $rootScope.$broadcast('gammaS', $scope.gammaS);
            $rootScope.$broadcast('gammaC', $scope.gammaC);
            $('#modalCoefficients').modal('toggle');
        };
    });


    rcBeam.controller('concreteCtrl', function ($scope, $rootScope,concreteProvider) {
        $scope.concretes = concreteProvider.getConcreteClasses();
        $scope.selectedConcrete = $scope.concretes[0];
        $scope.alphaCC = 1;

        $scope.$watch('selectedConcrete', function () {
            var properties = concreteProvider.getProperties($scope.selectedConcrete);
            $scope.fck = properties.fck;
            $scope.fcd = properties.fck / gammaC * $scope.alphaCC;
            $scope.n = properties.n;
            $scope.ec2 = properties.ec2;
            $scope.ecu2 = properties.ecu2;
        });
        $scope.$watch('alphaCC', function () {
            $scope.fcd = $scope.fck / gammaC * $scope.alphaCC;
        })

        var gammaC = 1.5;
        $scope.$on('gammaC', function (event, arg) {
            gammaC = arg;
        });


        

    });

    rcBeam.service('concreteProvider', function () {
        var self = this;
        this.getConcreteClasses = function () {
            return ["C12/15", "C16/20", "C20/25", "C25/30", "C30/37", "C35/45", "C40/50", "C45/55", "C50/60", "C55/67", "C60/75", "C70/85", "C80/95", "C90/105"]
        };
        this.getProperties = function (concreteClass) {
            
            var fck = convertFck(concreteClass);
            var ec2 = fck < 50 ? 2.0 : 2.0 + 0.085 * Math.pow(fck - 50, 0.53);
            var ecu2 = fck < 50 ? 3.5 : 2.6 + 35 * Math.pow((90 - fck) / 100, 4);
            var n = fck < 50 ? 2 : 1.4 + 23.4 * Math.pow((90 - fck) / 100, 4);

            var result = {
                fck: format(fck,2),
                ec2: format(ec2/1000,4),
                ecu2: format(ecu2/1000,4),
                n: format(n,2),
            }
            return result;

            function format(value, decimals)
            {
                return Number(value.toFixed(decimals));
            }

        }
        this.getChartValues = function (concreteClass,gammaC) {
            var properties = self.getProperties(concreteClass,gammaC);

            var fck = properties.fck;
            var fcd = fck/gammaC;
            var ec2 = properties.ec2;
            var ecu2 = properties.ecu2;
            var n = properties.n;

            var currentStrain = 0;
            var increase = 0.0001;
            var strain = new Array();
            var charStress = new Array();
            var designStress = new Array();

            while (currentStrain <= ecu2) {
                strain.push(currentStrain);

                var currentCharStress = strain <= ecu2 ? fck * (1 - Math.pow(1 - currentStrain / ec2, n)) : fck;
                charStress.push(currentCharStress);
                designStress.push(currentCharStress / gammaC);
            }
            return {
                strain: strain,
                charStress: charStress,
                designStress: designStress,
            }
        }

        var convertFck = function (concreteClass) {
            var strength = concreteClass.replace("C", "").split("/");

            var fck = Number(strength[0]);
            return fck;
        }

    });
</script>