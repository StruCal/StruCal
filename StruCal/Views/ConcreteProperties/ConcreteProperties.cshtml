
@{
    ViewBag.Title = "ConcreteProperties";
}
<br />
<br />
<br />
<div class="container" ng-app="concretePropertiesApp">
    <h2>Concrete Properties</h2>

    <div ng-controller="inputDataCtrl">
        <div class="panel panel-default">
            <div class="panel-heading">

            </div>
            <div class="panel-body">
                <form name="inputForm">
                    <div class="form-group">
                        <label class="control-label" for="concreteClasses">Select concrete class:</label>
                        <select class="form-control" name="concreteClasses" ng-model="selectedConcrete">
                            <option ng-repeat="concrete in concreteClasses" value="{{concrete}}">{{concrete}}</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="control-label" for="cementClasses">Select cement class:</label>
                        <select class="form-control" name="cementClasses" ng-model="selectedCement">
                            <option ng-repeat="cement in cementClasses" value="{{cement}}">{{cement}}</option>
                        </select>
                    </div>
                </form>
            </div>
        </div>
        <div class="panel panel-default">
            <div class="panel-heading">

            </div>
            <div class="panel-body">
                <table class="table table-condensed">
                    <thead>
                        <tr>
                            <th ng-repeat="(name, value) in properties">{{$parent.convert(name)}}</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td ng-repeat="(name, value) in properties">{{value}}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <test name={{fck}}></test>
    </div>
    <div ng-controller="chartCtrl">
        <div class="row">
            <div class="col-md-6">
                <canvas id="chart" class="chart chart-line" chart-data="data"
                        chart-labels="labels" chart-series="series" chart-options="options"
                        chart-dataset-override="datasetOverride" chart-click="onClick"></canvas>
            </div>
        </div>
    </div>
    
</div>
<br />
<br />

<style>
    .error {
        border: solid #ff0000 2px;
    }
</style>

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.0/angular.js"></script>
<script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-chart.js/1.1.1/angular-chart.js"></script>
<script>

    function refreshFormulas() {
        MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
    };



    var charts = angular.module('charts', ['chart.js']);

    charts.controller('chartCtrl', function ($scope) {
        $scope.series = ['fcm', ];
        
        $scope.datasetOverride = [{ yAxisID: 'y-axis-1' }];
        $scope.options = {
            scales: {
                yAxes: [
                  {
                      id: 'y-axis-1',
                      type: 'linear',
                      display: true,
                      position: 'left'
                  }
                ],
                xAxes: [{
                    display: false,
                }],
            },
            title: {
                text: '\(f_{cm} [MPa]\)',
                display: true,
            },
            tooltips:{
                enabled: false,
            },
            elements:
                {
                    point: {
                        radius: 0,
                        hitRadius: 0,
                        hoverRadius:0,
                    },
                    
                },
        };

        $scope.$on('concreteChange', function (event, arg) {
            var timeFunc = new timeFunctions(arg.fck, arg.fcm, arg.cementClass);
            var values = timeFunc.fcmValues();
            $scope.labels = values.x;
            $scope.data = [values.y];
        });
    });

    var application = angular.module('concretePropertiesApp', ['charts']);

    application.directive("test", function () {
        return {
            restrict: "E",
            scope: {
                name: "@@",
                func: "&"
            },
            template:
                "<div>"+
                "{{name}}"+
                "</div>",
            replace: true,
            transclude: false,
            controller: ["$scope", function ($scope) {

            }],
        }
        });

    application.controller("inputDataCtrl", function ($scope,$rootScope, concreteClasses, concreteProperties, nameConverter) {

        $scope.convert = nameConverter.convertName;

        $scope.concreteClasses = concreteClasses.concrete;//.classes()
        $scope.selectedConcrete = concreteClasses.concrete[0];//.classes()[0];

        $scope.cementClasses = concreteClasses.cement;
        $scope.selectedCement = concreteClasses.cement[0];

        $scope.$watch('selectedConcrete', () =>update());
        $scope.$watch('selectedCement', () =>update());

        var update = function () {
            //properties = new concretePropertiesProvider($scope.selectedClass)
            var properties = concreteProperties.getProperties($scope.selectedConcrete);

            $scope.fck = properties.fck;
            $scope.fckcube = properties.fckcube;
            $scope.properties = properties;

            $rootScope.$broadcast('concreteChange',
                {
                    fck: $scope.fck,
                    fcm: properties.fcm,
                    cementClass: $scope.selectedCement
                });

            refreshFormulas();
        }

    });

    application.factory('concreteClasses', function () {
        return {
            concrete: ["C12/15", "C16/20", "C20/25", "C25/30", "C30/37", "C35/45", "C40/50"],
            cement: ["S", "N", "R"],
        }
    });

    application.service('concreteProperties', function () {

        this.getProperties = function (concreteClass) {
            var strength = concreteClass.replace("C", "").split("/");

            var fck = Number(strength[0]);
            var fckcube = Number(strength[1]);

            var fcm = fck + 8;
            var fctm = fck <= 50 ? 0.3 * Math.pow(fck, 2 / 3) : 2.12 * Math.log(1 + fcm / 10);
            var fctk005 = 0.7 * fctm;
            var fctk095 = 1.3 * fctm;
            var Ecm = 22 * Math.pow(fcm / 10, 0.3);

            var ec1 = 0.7 * Math.pow(fcm, 0.31) > 2.8 ? 2.8 : 0.7 * Math.pow(fcm, 0.31);
            var ecu1 = fck < 50 ? 3.5 : 2.8 + 27 * Math.pow((98 - fcm) / 100, 4);
            var ec2 = fck < 50 ? 2.0 : 2.0 + 0.085 * Math.pow(fck - 50, 0.53);
            var ecu2 = fck < 50 ? 3.5 : 2.6 + 35 * Math.pow((90 - fck) / 100, 4);
            var n = fck < 50 ? 2 : 1.4 + 23.4 * Math.pow((90 - fck) / 100, 4);
            var ec3 = fck < 50 ? 1.75 : 1.75 + 0.55 * ((fck - 50) / 40)
            var ecu3 = fck < 50 ? 3.5 : 2.6 + 35 * Math.pow((90 - fck) / 100, 4);

            var result = {
                fck: fck,
                fckcube: fckcube,
                fcm: fcm,
                fctm: formatNumber(fctm),
                fctk005: formatNumber(fctk005),
                fctk095: formatNumber(fctk095),
                Ecm: formatNumber(Ecm),
                ec1: formatNumber(ec1),
                ecu1: formatNumber(ecu1),
                ec2: formatNumber(ec2),
                ecu2: formatNumber(ecu2),
                n: formatNumber(n),
                ec3: formatNumber(ec3),
                ecu3: formatNumber(ecu3),
            }
            return result;
        }

        function formatNumber(value) {
            return (Math.round(value * 100) / 100).toFixed(2);
        }

    });

    function timeFunctions(fck, fcm, cementType) {

        var cementFactor = (function () {
            var result;
            switch (cementType) {
                case "R":
                    result = 0.2;
                    break;
                case "N":
                    result = 0.25;
                    break;
                case "S":
                    result = 0.38;
                    break;
                default: result = 1
            }
            return result;
        })();
        var betaCC = function (t) {
            var result = Math.exp(cementFactor * (1 - (Math.sqrt(28 / t))));
            return result;
        };

        var fcmFunction = function (t) {
            var alpha = t >= 28 ? 2 / 3 : 1;

            var result = Math.pow(betaCC(t),alpha) * fcm;
            return result;
        };

        this.fcmValues = function () {
            var x = new Array();
            var y = new Array();
            for (var i = 0; i < 60; i++) {
                var value = fcmFunction(i);
                x.push(i);
                y.push(value);
            }
            return { x: x, y: y };
        }
    }

    application.service('nameConverter', function () {

        this.convertName = function convert(name) {
            var names = {
                fck: "\\(f_{ck} [{\\small MPa}]\\)",
                fckcube: "\\(f_{ck,cube} [MPa]\\)",
                fcm: "\\(f_{cm} [MPa]\\)",
                fctm: "\\(f_{ctm}\\)",
                fctk005: "\\(f_{ctk,005}\\)",
                fctk095: "\\(f_{ctk,095}\\)",
                Ecm: "\\(E_{cm}\\)",
                ec1: "\\(\\varepsilon_{c1} [{\\small^0/_{00}}]\\) ",
                ecu1: "\\(\\varepsilon_{cu1} [{\\tiny^0/_{00}}]\\)",
                ec2: "\\(\\varepsilon_{c2} [{\\tiny^0/_{00}}]\\)",
                ecu2: "\\(\\varepsilon_{cu2} [{\\tiny^0/_{00}}]\\)",
                n: "\\(n [{\\tiny-}]\\)",
                ec3: "\\(\\varepsilon_{c3} [{\\tiny^0/_{00}}]\\)",
                ecu3: "\\(\\varepsilon_{cu3} [{\\tiny^0/_{00}}]\\)",
            }
            return names[name];
        }
    })




</script>
