@{
    ViewBag.Title = "Shear Reinforcement";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    //list of input fields
    //
    var input = new List<string>();
    //label name | input field id | unit value | popOverButton
    input.Add("V_{Ed}   ;Ved   ;N     ;       ");
    input.Add("s        ;s     ;mm    ;       ");
    input.Add("A_{sw}   ;Asw   ;mm^2  ;popover");
    input.Add("b_w      ;bw    ;mm    ;       ");
    input.Add("d        ;d     ;mm    ;       ");
    input.Add("h        ;h     ;mm    ;       ");
    input.Add("f_{ywk}  ;fywk  ;N/mm^2;       ");
    input.Add("\\gamma_S;gammaS;      ;       ");
    input.Add("f_{ck}   ;fck   ;N/mm^2;       ");
    input.Add("\\gamma_C;gammaC;      ;       ");
    input.Add("N_{Ed}   ;Ned   ;N     ;       ");
    input.Add("k_1      ;k1    ;      ;       ");
    input.Add("A_{sl}   ;Asl   ;mm^2  ;popover");

}
@{
    //list of output fields for members NOT requiring shear reinforcement

    var outputNoShear = new List<string>();
    //output field id
    outputNoShear.Add("Crdc");
    outputNoShear.Add("fcd");
    outputNoShear.Add("k");
    outputNoShear.Add("ro1");
    outputNoShear.Add("vmin");
    outputNoShear.Add("sigmacp");
    outputNoShear.Add("Vrdc1");
    outputNoShear.Add("Vrdc1SecondLine");
    outputNoShear.Add("Vrdc2");
    outputNoShear.Add("Vrdc");
}
@{
    //list of output fields for members REQUIRING shear reinforcement
    //name of knockout field || determines if hide if no results
    var outputShear = new List<string>();
    outputShear.Add("fywd;");
    outputShear.Add("z;");
    outputShear.Add("v1;");
    outputShear.Add("alfaCw;");
    outputShear.Add("theta;");
    outputShear.Add("cotTheta;hide");
    outputShear.Add("cotThetaCalcs;hide");
    outputShear.Add("Vrdmax;hide");
    outputShear.Add("Vrds;hide");
}

<div class="container-fluid">

    <h2>Welcome to the Shear Reinforcement Calculator</h2>
    <h4>
        The calculator checks shear links for structural elements according to EN-1992-1.
    </h4>

    <div class="row" id="row">
        <div class="col-lg-4 text-left" id="inputData" style="cursor:ns-resize">
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Input Data</h3>
                    </div>
                    <div class="panel-body" id="inputPanel">
                        <div class="form-horizontal">
                            @foreach (var item in input)
                            {
                                var values = item.Split(';');

                                //label name | input field id | unit value | popOverButton

                                var name = values[0].Trim();
                                var id = values[1].Trim();
                                var unit = values[2].Trim();
                                var popoverButton = values[3].Trim();

                                var validationFormula = id + "Validation()";
                                <div class="form-group" data-bind="css: { 'has-error': @validationFormula == 0}">
                                    <div class="col-lg-2" tabindex="-1">
                                        <span>\(@name\)</span>
                                    </div>
                                    <div class="col-lg-1">
                                        <span>\(=\)</span>
                                    </div>
                                    <div class="col-lg-5">
                                        @if (popoverButton == "popover")
                                        {
                                            <div class="input-group">
                                                <input type="text" id=@id data-bind="value: @id, valueUpdate: 'afterkeydown'" class="form-control" />@*, valueUpdate: 'afterkeydown'*@
                                                <span class="input-group-btn">
                                                    <button class="btn" data-bind="css: { 'btn-danger': @validationFormula == 0, 'btn-default': @validationFormula == 1}" type="button" data-trigger="manual" data-toggle="popover"><span class="glyphicon glyphicon-cog"></span> </button>
                                                </span>
                                            </div>
                                        }
                                        else
                                        {
                                            <input type="text" id=@id data-bind="value: @id, valueUpdate: 'afterkeydown'" class="form-control" />@*, valueUpdate: 'afterkeydown'*@
                                        }
                                    </div>
                                    <div class="col-lg-1">
                                        @if (!string.IsNullOrWhiteSpace(unit))
                                        {
                                            <span>\(@unit.Replace("/"," \\over ")\)</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-8 text-left">
            @*results - members NOT requiring shear reinforcement*@
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Members not requiring design shear reinforcement</h3>
                    </div>
                    <div class="panel-body" data-bind="visible: inputValidated()">
                        @foreach (var item in outputNoShear)
                        {
                            var bindName = item + "Result";
                            <div class="form-group">
                                <p class="text-left" id=@item data-bind="text: @bindName"></p>
                            </div>
                        }
                        <div class="form-horizontal" data-bind="visible: Ved() <= Vrdc()">
                            <p data-bind="text: VrdcSummary"></p>
                            <h3><span class="label label-success">Section does not require shear reinforcement</span></h3>
                        </div>
                        <div class="form-horizontal" data-bind="visible: Ved() > Vrdc()">
                            <p data-bind="text: VrdcSummary"></p>
                            <h3><span class="label label-warning">Section requires shear reinforcement</span></h3>
                        </div>
                    </div>
                </div>
            </div>
            @*results - members requiring shear reinforcement*@
            <div class="panel-group" data-bind="visible: Ved() > Vrdc()">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Members requiring design shear reinforcement</h3>
                    </div>
                    <div class="panel-body" data-bind="visible: inputValidated()">
                        @foreach (var item in outputShear)
                        {
                            var value = item.Split(';');
                            var bindName = value[0] + "Result";
                            var shouldHide = value[1];
                            if (shouldHide == "hide")
                            {
                                <div class="form-group" data-bind="visible: !NoSolution()">
                                    <p class="text-left" id=@item data-bind="text: @bindName"></p>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    <p class="text-left" id=@item data-bind="text: @bindName"></p>
                                </div>
                            }
                        }
                        <div class="form-horizontal" data-bind="visible: NoSolution()">
                            <h3><span class="label label-danger">No solution. Concrete strut fails. Change section or concrete.</span></h3>
                        </div>
                        <div class="form-horizontal" data-bind="visible: Ved() <= Vrds() && !NoSolution()">
                            <p data-bind="text: VrdsSummary"></p>
                            <h3><span class="label label-success">Provided shear reinforcement is OK!</span></h3>
                        </div>
                        <div class="form-horizontal" data-bind="visible: Ved() > Vrds() && !NoSolution()">
                            <p data-bind="text: VrdsSummary"></p>
                            <h3><span class="label label-warning">Provided shear reinforcement is not sufficient.</span></h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="reinforcement-popover-content" class="hidden">
    <div class="form-group">
        <label class="control-label" for="countInput">Number of bars</label>
        <input type="number" class="form-control" id="countInput" />
    </div>
    <div class="form-group">
        <label class="control-label" for="diameterInput">Diameter [mm]</label>
        <input type="number" class="form-control" id="diameterInput" />
    </div>
    <div class="form-group">
        <label>Area: <span id="areaValue"></span>[mm<sup>2</sup>]</label>
    </div>
    <button class="btn btn-primary" id="applyReinforcement">Apply</button>
    <button class="btn btn-default" id="cancelReinforcement">Cancel</button>
</div>

<div id="reinforcement-popover-title" class="hidden">
    <b>Reinforcement</b>
</div>

<script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML-full'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.1/knockout-min.js"></script>

@Scripts.Render("~/bundles/shearReinforcement")